[{"G:\\코딩\\twitter\\src\\index.js":"1","G:\\코딩\\twitter\\src\\components\\App.js":"2","G:\\코딩\\twitter\\src\\fbase.js":"3","G:\\코딩\\twitter\\src\\components\\Router.js":"4","G:\\코딩\\twitter\\src\\components\\Navigation.js":"5","G:\\코딩\\twitter\\src\\routes\\Home.js":"6","G:\\코딩\\twitter\\src\\routes\\Profile.js":"7","G:\\코딩\\twitter\\src\\routes\\Auth.js":"8","G:\\코딩\\twitter\\src\\components\\Cweet.js":"9","G:\\코딩\\twitter\\src\\components\\CweetFactory.js":"10","G:\\코딩\\twitter\\src\\components\\AuthForm.js":"11"},{"size":207,"mtime":1610252578000,"results":"12","hashOfConfig":"13"},{"size":1381,"mtime":1610768578000,"results":"14","hashOfConfig":"13"},{"size":743,"mtime":1610252508000,"results":"15","hashOfConfig":"13"},{"size":1171,"mtime":1610258032000,"results":"16","hashOfConfig":"13"},{"size":492,"mtime":1610362258000,"results":"17","hashOfConfig":"13"},{"size":1167,"mtime":1610627792000,"results":"18","hashOfConfig":"13"},{"size":2219,"mtime":1610628066000,"results":"19","hashOfConfig":"13"},{"size":953,"mtime":1610626100000,"results":"20","hashOfConfig":"13"},{"size":2391,"mtime":1610625770000,"results":"21","hashOfConfig":"13"},{"size":2294,"mtime":1610364252000,"results":"22","hashOfConfig":"13"},{"size":2825,"mtime":1610768750000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"19ve5um",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"G:\\코딩\\twitter\\src\\index.js",[],["54","55"],"G:\\코딩\\twitter\\src\\components\\App.js",[],"G:\\코딩\\twitter\\src\\fbase.js",["56"],"import { fireEvent } from \"@testing-library/react\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","G:\\코딩\\twitter\\src\\components\\Router.js",["57"],"import React from 'react';\r\nimport { HashRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nconst TwitRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation displayName={userObj.displayName} />}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj} />\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile userObj={userObj} refreshUser={refreshUser} />\r\n                        </Route>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                    </>\r\n                    )\r\n                }\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default TwitRouter;","G:\\코딩\\twitter\\src\\components\\Navigation.js",["58"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'styles/Styles.css';\r\n\r\nconst Navigation = ({ displayName }) => (\r\n    <nav>\r\n        <ul className=\"navigator\" className=\"nav\">\r\n            <li>\r\n                <Link to=\"/\" className=\"nav_prop\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/profile\" className=\"nav_prop\">{displayName}'s Profile</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Navigation;","G:\\코딩\\twitter\\src\\routes\\Home.js",[],"G:\\코딩\\twitter\\src\\routes\\Profile.js",["59"],"import { authService, dbService } from 'fbase';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Cweet from 'components/Cweet';\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"styles/Styles.css\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n    const [myCweets, setCweets] = useState([]);\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const history = useHistory();\r\n\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const getMyCweets = async () => {\r\n        const cweets = await dbService\r\n            .collection(\"tweets\")\r\n            .where(\"creatorId\", \"==\", userObj.uid)\r\n            .orderBy(\"createdAt\")\r\n            .get();\r\n        const myCweetObject = cweets.docs.map((doc) => doc.data());\r\n        setCweets(myCweetObject);\r\n        console.log(myCweets);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMyCweets();\r\n    }, []);\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target:{value}\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {\r\n            //update\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Display name\"\r\n                    value={newDisplayName}\r\n                    onChange={onChange}\r\n                />\r\n                <input type=\"submit\" value=\"Update profile\" />\r\n            </form>\r\n            <button onClick={onLogOutClick}>Sign Out</button>\r\n\r\n            {myCweets.map((cweet) => (\r\n                <div className=\"cweet\">\r\n                    <Cweet\r\n                        key={cweet.id}\r\n                        cweetObj={cweet}\r\n                        isOwner={cweet.creatorId === userObj.uid}\r\n                    />\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;","G:\\코딩\\twitter\\src\\routes\\Auth.js",[],"G:\\코딩\\twitter\\src\\components\\Cweet.js",["60"],"import { dbService, storageService } from 'fbase';\r\nimport React, { useState } from 'react';\r\nimport 'styles/Styles.css';\r\n\r\nconst Cweet = ({ cweetObj, isOwner }) => {\r\n\r\n    const [editing, setEditing] = useState(false);\r\n    const [newCweet, setNewCweet] = useState(cweetObj.text);\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this cweet?\");\r\n        if(ok) {\r\n            await dbService.doc(`tweets/${cweetObj.id}`).delete();\r\n            await storageService.refFromURL(cweetObj.attachmentUrl).delete();\r\n        }\r\n    }\r\n\r\n    const toggleEditing = () => {\r\n        setEditing((prev) => !prev);\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`tweets/${cweetObj.id}`).update({\r\n            text: newCweet\r\n        })\r\n        setEditing(false);\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        const {target : {value}} = event;\r\n        setNewCweet(value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        {isOwner && (\r\n                            <>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder=\"Edit your cweet\"\r\n                                    value={newCweet}\r\n                                    onChange={onChange}\r\n                                    required\r\n                                />\r\n                                <input type=\"submit\" value=\"Update Cweet\" />\r\n                            </>\r\n                        )}\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4 className=\"cweet__txt\">{cweetObj.text}</h4>\r\n                    {cweetObj.attachmentUrl && <img src={cweetObj.attachmentUrl} className=\"cweet_img\" />}\r\n                    {isOwner && (\r\n                        <>\r\n                            <button onClick={onDeleteClick}>Delete Cweet</button>\r\n                            <button onClick={toggleEditing}>Edit Cweet</button>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cweet;","G:\\코딩\\twitter\\src\\components\\CweetFactory.js",["61"],"import React, { useState } from 'react';\r\nimport { dbService, storageService } from 'fbase';\r\nimport {v4 as uuid} from \"uuid\";\r\nimport \"styles/Styles.css\"\r\n\r\nconst CweetFactory = ({ userObj }) => {\r\n    const [attachment, setAttatchment] = useState(\"\");\r\n    const [cweet, setCweet] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        let attachmentUrl = \"\";\r\n\r\n        if(attachment !== \"\") {\r\n            const attatchmentRef = storageService\r\n                .ref()\r\n                .child(`${userObj.uid}/${uuid()}`);\r\n            const response = await attatchmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n\r\n        const cweetObj = {\r\n            text: cweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl\r\n        };\r\n\r\n        await dbService.collection(\"tweets\").add(cweetObj);\r\n        setCweet(\"\");\r\n        setAttatchment(\"\");\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        const { target:{value} } = event;\r\n        setCweet(value);\r\n    };\r\n\r\n    const onFileChange = (event) => {    \r\n        const { target:{files} } = event;\r\n        const File = files[0];\r\n        const reader = new FileReader();\r\n        \r\n        reader.onloadend = (finishedEvent) => {\r\n            const { target: { result }} = finishedEvent;\r\n            setAttatchment(result);\r\n        }\r\n\r\n        reader.readAsDataURL(File);\r\n    }\r\n\r\n    const onClearAttachment = () => {\r\n        setAttatchment(null);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input\r\n                value={cweet}\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                maxLength={120}\r\n            />\r\n            <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n            <input type=\"submit\" value=\"Cweet\" />\r\n\r\n            {attachment && (\r\n                <div>\r\n                    <img src={attachment} width=\"130px\" height=\"90px\" />\r\n                    <button onClick={onClearAttachment}>Clear</button>\r\n                </div>\r\n            )}\r\n\r\n        </form>\r\n    );\r\n\r\n};\r\n\r\nexport default CweetFactory;","G:\\코딩\\twitter\\src\\components\\AuthForm.js",["62","63"],"import React, { useState } from 'react';\r\nimport { authService } from 'fbase';\r\n//import * as emailjs from 'emailjs-com';\r\nimport PropTypes from 'prop-types';\r\nimport 'styles/Styles.css';\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    /*emailjs.init(\"user_qZI9l13HagISOtHrtwC3r\");\r\n\r\n    const mailHandler = (event, MailTo) => {\r\n        event.preventDefault();\r\n\r\n        let templateParams = {\r\n            from_name: process.env.MY_MAIL,\r\n            to_name: `<${MailTo}>`,\r\n            subject: 'Sign In Announcement from Cwitter',\r\n            message_html: ''\r\n        }\r\n\r\n        emailjs.send(\r\n            'naver',\r\n            'template_c2fnq3i',\r\n            templateParams,\r\n            'user_qZI9l13HagISOtHrtwC3r'\r\n        )\r\n    }*/\r\n\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"email\") {\r\n            setEmail(value);\r\n        } else if(name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if(newAccount) {\r\n                //create\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n                //mailHandler(email);\r\n            } else {\r\n                //log in\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n        } catch(error) {\r\n            var errormsg = error.message;\r\n            setError(errormsg);\r\n            console.log(errormsg);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    name=\"email\"\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    onChange={onChange}\r\n                    required\r\n                />\r\n                <input\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={onChange}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value={newAccount ? \"Create Account\" : \"Log In\"}\r\n                />\r\n                {error && <span styles=\"color: red;\">error</span>}\r\n            </form>\r\n            <span onClick={toggleAccount}>{newAccount ? \"Sign in\" : \"Create Account\"}</span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthForm",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":10,"nodeType":"70","messageId":"71","endLine":1,"endColumn":19},{"ruleId":"68","severity":1,"message":"72","line":2,"column":32,"nodeType":"70","messageId":"71","endLine":2,"endColumn":40},{"ruleId":"73","severity":1,"message":"74","line":7,"column":35,"nodeType":"75","endLine":7,"endColumn":50},{"ruleId":"76","severity":1,"message":"77","line":30,"column":8,"nodeType":"78","endLine":30,"endColumn":10,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":58,"column":48,"nodeType":"82","endLine":58,"endColumn":106},{"ruleId":"80","severity":1,"message":"81","line":71,"column":21,"nodeType":"82","endLine":71,"endColumn":73},{"ruleId":"68","severity":1,"message":"83","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":17},{"ruleId":"68","severity":1,"message":"84","line":51,"column":17,"nodeType":"70","messageId":"71","endLine":51,"endColumn":21},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'fireEvent' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyCweets'. Either include it or remove the dependency array.","ArrayExpression",["87"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PropTypes' is defined but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [getMyCweets]",{"range":"90","text":"91"},[961,963],"[getMyCweets]"]